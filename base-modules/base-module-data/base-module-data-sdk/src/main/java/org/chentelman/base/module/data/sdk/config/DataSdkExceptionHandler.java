package org.chentelman.base.module.data.sdk.config;

import org.chentelman.base.module.core.config.BaseExceptionHandler;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.web.bind.annotation.RestControllerAdvice;

/**
 * Implementation of a generic exception handler to handle system exceptions
 *
 * Handled exception
 *  - BaseException
 *    Those are the "business" exceptions indicating an issue completing the requested task
 *
 *  - HttpMessageConversionException
 *    This is the error raised by spring in case the request body is not able to be converted to the specified class
 *
 *  - TypeMismatchException
 *    This is generated by spring in case any provided type is able to be converted
 *
 *  - AuthenticationException
 *    This is generated in case the user is not able to be authenticated
 *
 *  - MethodArgumentNotValidException
 *    This is generated by spring in case any validation checks fail
 *
 *  - MethodArgumentTypeMismatchException
 *    This is generated by spring in case method argument type mismatch is found
 *
 *  - Exception
 *    This is a generic handler for all exceptions not being processed by any of the other handlers
 *    will result in an internal server error being generated
 */
@Order(Ordered.HIGHEST_PRECEDENCE)
@RestControllerAdvice
@ConditionalOnMissingBean(DataSdkExceptionHandler.class)
public class DataSdkExceptionHandler extends BaseExceptionHandler {

}




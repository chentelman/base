package org.chentelman.base.module.rest.config;

import org.chentelman.base.module.core.config.BaseExceptionHandler;
import org.chentelman.base.module.http.exception.BadRequestException;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.NoHandlerFoundException;

/**
 * Implementation of a rest exception handler to handle system exceptions
 *
 * Handled exception
 *  - HttpMediaTypeNotAcceptableException
 *    This is generated by spring in case no supported media type is accepted by sender
 *
 *  - NoHandlerFoundException
 *    This is the error raised by spring in case no handler is found for the request
 *    Handler will convert this error to NotFoundException (BaseException) and return the error
 *
 *  - HttpRequestMethodNotSupportedException
 *    This is the error raised by spring in case the handler does not support the request method
 *    Handler will convert this error to MethodNotAllowedException (BaseException) and return the error
 *
 *  - MissingRequestHeaderException
 *    This error is generated by spring in case a header that is required to process a request is missing
 */
@Order(Ordered.HIGHEST_PRECEDENCE)
@RestControllerAdvice
@ConditionalOnMissingBean(RestExceptionHandler.class)
public class RestExceptionHandler extends BaseExceptionHandler {

	/**
	 * This is the error raised by spring in case no handler is found for the request
	 * Handler will convert this error to NotFoundException (BaseException) and return the error
	 */
	@ExceptionHandler(NoHandlerFoundException.class)
	public final ResponseEntity<BadRequestException> handleNoHandlerFoundException (final NoHandlerFoundException ex) {
		return generateResponse (
			new BadRequestException(ex.getMessage())
		);
	}

	/**
	 * This is the error raised by spring in case the handler does not support the request method
	 * Handler will convert this error to MethodNotAllowedException (BaseException) and return the error
	 */
	@ExceptionHandler(HttpRequestMethodNotSupportedException.class)
	public final ResponseEntity<BadRequestException> handleHttpRequestMethodNotSupportedException (final HttpRequestMethodNotSupportedException ex) {
		return generateResponse (
			new BadRequestException(ex.getMessage())
		);
	}

	/**
	 * This error is generated by spring in case a header that is required to process a request is missing
	 */
	@ExceptionHandler(MissingRequestHeaderException.class)
	public final ResponseEntity<BadRequestException> handleMissingRequestHeaderException (final MissingRequestHeaderException ex) {
		return generateResponse (
			new BadRequestException(ex.getMessage())
		);
	}

	/**
	 * This is generated by spring in case no supported media type is accepted by sender
	 */
	@ExceptionHandler(HttpMediaTypeNotAcceptableException.class)
	public final ResponseEntity<BadRequestException> handleHttpMediaTypeNotAcceptableException(HttpMediaTypeNotAcceptableException ex) {
		return generateResponse (
			new BadRequestException ("Supported media types : " + ex.getSupportedMediaTypes())
		);
	}
}



